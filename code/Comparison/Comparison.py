import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
sys.stdout.reconfigure(encoding='utf-8')

import time
import tracemalloc
import psutil
import os
from collections import defaultdict
import matplotlib.pyplot as plt
import csv
from SolverAlgorithms.DFS import DFSStrategy
from SolverAlgorithms.BFS import BFSStrategy
from SolverAlgorithms.AStarr import AStarStrategy
from SolverAlgorithms.UCS import UCSStrategy
from Game.Map import Map

class AlgorithmComparison:
    """C√¥ng c·ª• so s√°nh hi·ªáu su·∫•t c√°c thu·∫≠t to√°n gi·∫£i Rush Hour"""
    
    def __init__(self, map_obj, map_id=None):
        self.map = map_obj
        self.map_id = map_id
        self.algorithms = {
            'DFS': DFSStrategy,
            'BFS': BFSStrategy,
            'A*': AStarStrategy,
            'UCS': UCSStrategy
        }
        self.results = defaultdict(dict)
        self.comparison_data = []
    
    def measure_performance(self, algorithm_name, max_depth=50, runs=1):
        """ƒêo hi·ªáu su·∫•t c·ªßa m·ªôt thu·∫≠t to√°n"""
        algorithm_class = self.algorithms[algorithm_name]
        
        performance_data = {
            'algorithm': algorithm_name,
            'execution_times': [],
            'memory_usage': [],
            'peak_memory': [],
            'solution_lengths': [],
            'states_explored': [],
            'success_rate': 0,
            'average_time': 0,
            'average_memory': 0,
            'average_solution_length': 0,
            'average_states_explored': 0
        }
        
        successful_runs = 0
        
        for run in range(runs):
            print(f"Ch·∫°y {algorithm_name} - L·∫ßn {run + 1}/{runs}")
            
            # ƒêo b·ªô nh·ªõ
            tracemalloc.start()
            process = psutil.Process(os.getpid())
            memory_before = process.memory_info().rss / 1024 / 1024  # MB
            
            # T·∫°o instance thu·∫≠t to√°n
            if algorithm_name == 'DFS':
                solver = algorithm_class(self.map, max_depth)
            elif algorithm_name == 'BFS':
                solver = algorithm_class(self.map, max_depth)  
            elif algorithm_name == 'UCS':
                solver = algorithm_class(self.map)
            elif algorithm_name == 'A*':
                solver = algorithm_class(self.map, max_time=30)
            else:
                raise ValueError(f"Thu·∫≠t to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {algorithm_name}")
            
            # ƒêo th·ªùi gian th·ª±c thi
            start_time = time.time()
            solution = solver.solve()
            end_time = time.time()
            
            execution_time = end_time - start_time
            
            # ƒêo b·ªô nh·ªõ sau khi ch·∫°y
            current, peak = tracemalloc.get_traced_memory()
            tracemalloc.stop()
            
            memory_after = process.memory_info().rss / 1024 / 1024  # MB
            memory_used = memory_after - memory_before
            peak_memory_mb = peak / 1024 / 1024  # MB
            
            # L∆∞u k·∫øt qu·∫£
            performance_data['execution_times'].append(execution_time)
            performance_data['memory_usage'].append(memory_used)
            performance_data['peak_memory'].append(peak_memory_mb)
            
            if solution is not None:
                successful_runs += 1
                performance_data['solution_lengths'].append(len(solution))
                
                # L·∫•y th√¥ng tin t·ª´ solver n·∫øu c√≥
                if hasattr(solver, 'get_search_info'):
                    search_info = solver.get_search_info()
                    performance_data['states_explored'].append(search_info.get('states_explored', 0))
                else:
                    performance_data['states_explored'].append(len(solver.table) if hasattr(solver, 'table') else 0)
            else:
                performance_data['solution_lengths'].append(0)
                performance_data['states_explored'].append(len(solver.table) if hasattr(solver, 'table') else 0)
        
        # T√≠nh to√°n trung b√¨nh
        if performance_data['execution_times']:
            performance_data['average_time'] = sum(performance_data['execution_times']) / len(performance_data['execution_times'])
            performance_data['average_memory'] = sum(performance_data['memory_usage']) / len(performance_data['memory_usage'])
            performance_data['average_states_explored'] = sum(performance_data['states_explored']) / len(performance_data['states_explored'])
        
        if successful_runs > 0:
            valid_solutions = [x for x in performance_data['solution_lengths'] if x > 0]
            performance_data['average_solution_length'] = sum(valid_solutions) / len(valid_solutions) if valid_solutions else 0
        
        performance_data['success_rate'] = (successful_runs / runs) * 100
        
        return performance_data
    
    def compare_algorithms(self, max_depth=50, runs=3):
        """So s√°nh t·∫•t c·∫£ c√°c thu·∫≠t to√°n"""
        print(f"üîç B·∫Øt ƒë·∫ßu so s√°nh thu·∫≠t to√°n cho Map {self.map_id}...")
        print("=" * 50)
        
        for algorithm_name in self.algorithms.keys():
            print(f"\nüìä ƒêang ƒëo hi·ªáu su·∫•t {algorithm_name}...")
            
            performance_data = self.measure_performance(algorithm_name, max_depth, runs)
            self.results[algorithm_name] = performance_data
            self.comparison_data.append(performance_data)
        
        return self.results
    
    def print_comparison_report(self):
        """In b√°o c√°o so s√°nh chi ti·∫øt"""
        print("\n" + "=" * 80)
        print(f"üìã B√ÅO C√ÅO SO S√ÅNH THU·∫¨T TO√ÅN - MAP {self.map_id}")
        print("=" * 80)
        
        for algorithm_name, data in self.results.items():
            print(f"\nüî∏ {algorithm_name.upper()}")
            print("-" * 40)
            print(f"‚è±Ô∏è  Th·ªùi gian trung b√¨nh: {data['average_time']:.4f} gi√¢y")
            print(f"üíæ B·ªô nh·ªõ s·ª≠ d·ª•ng: {data['average_memory']:.2f} MB")
            print(f"üéØ T·ª∑ l·ªá th√†nh c√¥ng: {data['success_rate']:.1f}%")
            print(f"üìè ƒê·ªô d√†i nghi·ªám TB: {data['average_solution_length']:.1f} b∆∞·ªõc")
            print(f"üîç S·ªë tr·∫°ng th√°i kh√°m ph√°: {data['average_states_explored']:.0f}")
            
            if data['execution_times']:
                print(f"‚ö° Th·ªùi gian nhanh nh·∫•t: {min(data['execution_times']):.4f} gi√¢y")
                print(f"üêå Th·ªùi gian ch·∫≠m nh·∫•t: {max(data['execution_times']):.4f} gi√¢y")
        
        # So s√°nh tr·ª±c ti·∫øp
        print(f"\nüèÜ SO S√ÅNH TR·ª∞C TI·∫æP")
        print("-" * 40)
        
        if len(self.results) >= 2:
            algorithms = list(self.results.keys())
            dfs_data = self.results.get('DFS', {})
            bfs_data = self.results.get('BFS', {})
            
            if dfs_data and bfs_data:
                # So s√°nh th·ªùi gian
                if dfs_data['average_time'] < bfs_data['average_time']:
                    time_diff = bfs_data['average_time'] - dfs_data['average_time']
                    print(f"‚ö° DFS nhanh h∆°n BFS {time_diff:.4f} gi√¢y ({((time_diff/bfs_data['average_time'])*100):.1f}%)")
                else:
                    time_diff = dfs_data['average_time'] - bfs_data['average_time']
                    print(f"‚ö° BFS nhanh h∆°n DFS {time_diff:.4f} gi√¢y ({((time_diff/dfs_data['average_time'])*100):.1f}%)")
                
                # So s√°nh b·ªô nh·ªõ
                if dfs_data['average_memory'] < bfs_data['average_memory']:
                    memory_diff = bfs_data['average_memory'] - dfs_data['average_memory']
                    print(f"üíæ DFS ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n BFS {memory_diff:.2f} MB")
                else:
                    memory_diff = dfs_data['average_memory'] - bfs_data['average_memory']
                    print(f"üíæ BFS ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n DFS {memory_diff:.2f} MB")
                
                # So s√°nh ƒë·ªô d√†i nghi·ªám
                if dfs_data['average_solution_length'] > 0 and bfs_data['average_solution_length'] > 0:
                    if dfs_data['average_solution_length'] < bfs_data['average_solution_length']:
                        step_diff = bfs_data['average_solution_length'] - dfs_data['average_solution_length']
                        print(f"üéØ DFS t√¨m nghi·ªám ng·∫Øn h∆°n BFS {step_diff:.1f} b∆∞·ªõc")
                    elif bfs_data['average_solution_length'] < dfs_data['average_solution_length']:
                        step_diff = dfs_data['average_solution_length'] - bfs_data['average_solution_length']
                        print(f"üéØ BFS t√¨m nghi·ªám ng·∫Øn h∆°n DFS {step_diff:.1f} b∆∞·ªõc")
                    else:
                        print(f"üéØ C·∫£ hai thu·∫≠t to√°n t√¨m nghi·ªám c√πng ƒë·ªô d√†i")
    
    def generate_performance_chart(self, save_path=None):
        """T·∫°o bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t"""
        if not self.comparison_data:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle(f'So s√°nh hi·ªáu su·∫•t thu·∫≠t to√°n - Map {self.map_id}', fontsize=16, fontweight='bold')
        
        algorithms = [data['algorithm'] for data in self.comparison_data]
        
        # Bi·ªÉu ƒë·ªì th·ªùi gian th·ª±c thi
        times = [data['average_time'] for data in self.comparison_data]
        colors = ['skyblue', 'lightcoral', 'lightgreen', 'lightyellow']
        axes[0, 0].bar(algorithms, times, color=colors[:len(algorithms)])
        axes[0, 0].set_title('Th·ªùi gian th·ª±c thi trung b√¨nh')
        axes[0, 0].set_ylabel('Th·ªùi gian (gi√¢y)')
        
        # Bi·ªÉu ƒë·ªì b·ªô nh·ªõ s·ª≠ d·ª•ng
        memories = [data['average_memory'] for data in self.comparison_data]
        axes[0, 1].bar(algorithms, memories, color=colors[:len(algorithms)])
        axes[0, 1].set_title('B·ªô nh·ªõ s·ª≠ d·ª•ng trung b√¨nh')
        axes[0, 1].set_ylabel('B·ªô nh·ªõ (MB)')
        
        # Bi·ªÉu ƒë·ªì s·ªë b∆∞·ªõc gi·∫£i
        solution_lengths = [data['average_solution_length'] for data in self.comparison_data]
        axes[1, 0].bar(algorithms, solution_lengths, color=colors[:len(algorithms)])
        axes[1, 0].set_title('ƒê·ªô d√†i nghi·ªám trung b√¨nh')
        axes[1, 0].set_ylabel('S·ªë b∆∞·ªõc')
        
        # Bi·ªÉu ƒë·ªì s·ªë tr·∫°ng th√°i kh√°m ph√°
        states_explored = [data['average_states_explored'] for data in self.comparison_data]
        axes[1, 1].bar(algorithms, states_explored, color=colors[:len(algorithms)])
        axes[1, 1].set_title('S·ªë tr·∫°ng th√°i kh√°m ph√°')
        axes[1, 1].set_ylabel('S·ªë tr·∫°ng th√°i')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"üíæ Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u: {save_path}")
        
        plt.close()  # ƒê√≥ng figure ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
    
    def export_results_to_csv(self, filename):
        """Xu·∫•t k·∫øt qu·∫£ ra file CSV"""
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['Algorithm', 'Avg_Time', 'Avg_Memory', 'Success_Rate', 
                         'Avg_Solution_Length', 'Avg_States_Explored', 'Map_ID']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for data in self.comparison_data:
                writer.writerow({
                    'Algorithm': data['algorithm'],
                    'Avg_Time': data['average_time'],
                    'Avg_Memory': data['average_memory'],
                    'Success_Rate': data['success_rate'],
                    'Avg_Solution_Length': data['average_solution_length'],
                    'Avg_States_Explored': data['average_states_explored'],
                    'Map_ID': self.map_id
                })
        
        print(f"üíæ K·∫øt qu·∫£ Map {self.map_id} ƒë√£ ƒë∆∞·ª£c xu·∫•t ra: {filename}")

    def save_text_report(self, filename):
        """L∆∞u b√°o c√°o text v√†o file"""
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write(f"üìã B√ÅO C√ÅO SO S√ÅNH THU·∫¨T TO√ÅN - MAP {self.map_id}\n")
            f.write("=" * 80 + "\n\n")
            
            for algorithm_name, data in self.results.items():
                f.write(f"üî∏ {algorithm_name.upper()}\n")
                f.write("-" * 40 + "\n")
                f.write(f"‚è±Ô∏è  Th·ªùi gian trung b√¨nh: {data['average_time']:.4f} gi√¢y\n")
                f.write(f"üíæ B·ªô nh·ªõ s·ª≠ d·ª•ng: {data['average_memory']:.2f} MB\n")
                f.write(f"üéØ T·ª∑ l·ªá th√†nh c√¥ng: {data['success_rate']:.1f}%\n")
                f.write(f"üìè ƒê·ªô d√†i nghi·ªám TB: {data['average_solution_length']:.1f} b∆∞·ªõc\n")
                f.write(f"üîç S·ªë tr·∫°ng th√°i kh√°m ph√°: {data['average_states_explored']:.0f}\n")
                
                if data['execution_times']:
                    f.write(f"‚ö° Th·ªùi gian nhanh nh·∫•t: {min(data['execution_times']):.4f} gi√¢y\n")
                    f.write(f"üêå Th·ªùi gian ch·∫≠m nh·∫•t: {max(data['execution_times']):.4f} gi√¢y\n")
                f.write("\n")
        
        print(f"üíæ B√°o c√°o Map {self.map_id} ƒë√£ ƒë∆∞·ª£c l∆∞u: {filename}")


def run_all_comparisons(max_depth=50, runs=3):
    """Ch·∫°y so s√°nh cho t·∫•t c·∫£ 10 map"""
    print("üöÄ B·∫Øt ƒë·∫ßu so s√°nh thu·∫≠t to√°n cho t·∫•t c·∫£ 10 map...")
    print("=" * 80)
    
    # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
    results_dir = "code/Comparison/Results"
    os.makedirs(results_dir, exist_ok=True)
    
    all_results = []
    
    for map_id in range(1, 11):
        print(f"\nüó∫Ô∏è  ƒêang x·ª≠ l√Ω Map {map_id}...")
        
        try:
            # T·∫°o map
            game_map = Map()
            game_map.load_level_data_from_file(map_id)
            
            # T·∫°o comparison object
            comparison = AlgorithmComparison(game_map, map_id)
            
            # Ch·∫°y so s√°nh
            results = comparison.compare_algorithms(max_depth, runs)
            all_results.append((map_id, results))
            
            # In b√°o c√°o
            comparison.print_comparison_report()
            
            # L∆∞u c√°c file k·∫øt qu·∫£
            base_filename = f"{results_dir}/{map_id:02d}_comparison"
            
            # L∆∞u b√°o c√°o text
            comparison.save_text_report(f"{base_filename}.txt")
            
            # L∆∞u CSV
            comparison.export_results_to_csv(f"{base_filename}.csv")
            
            # T·∫°o v√† l∆∞u bi·ªÉu ƒë·ªì
            try:
                comparison.generate_performance_chart(f"{base_filename}_chart.png")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì cho Map {map_id}: {e}")
            
            print(f"‚úÖ Ho√†n th√†nh Map {map_id}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω Map {map_id}: {e}")
            continue
    
    # T·∫°o b√°o c√°o t·ªïng h·ª£p
    create_summary_report(all_results, results_dir)
    
    print(f"\nüéâ Ho√†n th√†nh so s√°nh cho t·∫•t c·∫£ map!")
    print(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: {results_dir}")
    
    return all_results


def create_summary_report(all_results, results_dir):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p cho t·∫•t c·∫£ map"""
    summary_file = f"{results_dir}/00_summary_report.txt"
    
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("üèÜ B√ÅO C√ÅO T·ªîNG H·ª¢P - T·∫§T C·∫¢ MAP\n")
        f.write("=" * 80 + "\n\n")
        
        # B·∫£ng t√≥m t·∫Øt
        f.write("üìä B·∫¢NG T√ìM T·∫ÆT HI·ªÜU SU·∫§T\n")
        f.write("-" * 80 + "\n")
        f.write(f"{'Map':<5} {'DFS Time':<10} {'BFS Time':<10} {'A* Time':<10} {'UCS Time':<10} {'Winner':<10}\n")
        f.write("-" * 80 + "\n")
        
        for map_id, results in all_results:
            if results:
                dfs_time = results.get('DFS', {}).get('average_time', 0)
                bfs_time = results.get('BFS', {}).get('average_time', 0)
                astar_time = results.get('A*', {}).get('average_time', 0)
                ucs_time = results.get('UCS', {}).get('average_time', 0)
                
                # T√¨m thu·∫≠t to√°n nhanh nh·∫•t
                times = {'DFS': dfs_time, 'BFS': bfs_time, 'A*': astar_time, 'UCS': ucs_time}
                winner = min(times, key=times.get) if any(times.values()) else 'N/A'
                
                f.write(f"{map_id:<5} {dfs_time:<10.4f} {bfs_time:<10.4f} {astar_time:<10.4f} {ucs_time:<10.4f} {winner:<10}\n")
        
        f.write("\n")
        
        # Th·ªëng k√™ t·ªïng th·ªÉ
        f.write("üìà TH·ªêNG K√ä T·ªîNG TH·ªÇ\n")
        f.write("-" * 40 + "\n")
        
        algorithm_wins = {'DFS': 0, 'BFS': 0, 'A*': 0, 'UCS': 0}
        
        for map_id, results in all_results:
            if results:
                times = {}
                for alg in ['DFS', 'BFS', 'A*', 'UCS']:
                    if alg in results and results[alg].get('average_time', 0) > 0:
                        times[alg] = results[alg]['average_time']
                
                if times:
                    winner = min(times, key=times.get)
                    algorithm_wins[winner] += 1
        
        f.write(f"üèÜ S·ªë l·∫ßn th·∫Øng:\n")
        for alg, wins in algorithm_wins.items():
            f.write(f"   {alg}: {wins} l·∫ßn\n")
    
    print(f"üíæ B√°o c√°o t·ªïng h·ª£p ƒë√£ ƒë∆∞·ª£c l∆∞u: {summary_file}")


if __name__ == "__main__":
    # Ch·∫°y so s√°nh cho t·∫•t c·∫£ 10 map
    run_all_comparisons(
        max_depth=50,   # ƒë·ªô s√¢u t·ªëi ƒëa
        runs=3          # s·ªë l·∫ßn ch·∫°y m·ªói thu·∫≠t to√°n
    )